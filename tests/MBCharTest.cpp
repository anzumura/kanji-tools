#include <gtest/gtest.h>

#include <kanji/MBChar.h>

#include <array>
#include <fstream>

namespace kanji {

TEST(MBChar, Length) {
  EXPECT_EQ(MBChar("").length(), 0);
  EXPECT_EQ(MBChar::length(nullptr), 0);
  EXPECT_EQ(MBChar("abc").length(), 0);
  EXPECT_EQ(MBChar("abc").length(false), 3);
  EXPECT_EQ(MBChar("Â§ßblueÁ©∫").length(), 2);
  EXPECT_EQ(MBChar("Â§ßblueÁ©∫").length(false), 6);
}

TEST(MBChar, Valid) {
  EXPECT_FALSE(MBChar("").valid());
  EXPECT_FALSE(MBChar::valid(nullptr));
  EXPECT_FALSE(MBChar("a").valid());
  std::string x("Èõ™");
  EXPECT_EQ(x.length(), 3);
  EXPECT_TRUE(MBChar(x).valid());

  // longer strings are not considered valid by default
  EXPECT_FALSE(MBChar("ÂêπÈõ™").valid());
  EXPECT_FALSE(MBChar("Áå´s").valid());
  EXPECT_FALSE(MBChar("aÁå´").valid());

  // however, longer strings can be valid if 'checkLengthOne' is false
  EXPECT_TRUE(MBChar("ÂêπÈõ™").valid(false));
  EXPECT_TRUE(MBChar("Áå´s").valid(false));
  // but the first char must be a multi-byte
  EXPECT_FALSE(MBChar("aÁå´").valid(false));

  // badly formed strings:
  EXPECT_FALSE(MBChar::valid(x.substr(0, 1)));
  EXPECT_FALSE(MBChar::valid(x.substr(0, 2)));
  EXPECT_FALSE(MBChar::valid(x.substr(1, 1)));
  EXPECT_FALSE(MBChar::valid(x.substr(1, 2)));
}

TEST(MBChar, ValidWithTwoByte) {
  std::string x("¬©");
  EXPECT_EQ(x.length(), 2);
  EXPECT_TRUE(MBChar(x).valid());
  // badly formed strings:
  EXPECT_FALSE(MBChar::valid(x.substr(0, 1)));
  EXPECT_FALSE(MBChar::valid(x.substr(1)));
}

TEST(MBChar, ValidWithFourByte) {
  std::string x("íÄÑ"); // a four byte sumerian cuneiform symbol
  EXPECT_EQ(x.length(), 4);
  EXPECT_TRUE(MBChar(x).valid());
  // badly formed strings:
  EXPECT_FALSE(MBChar::valid(x.substr(0, 1)));
  EXPECT_FALSE(MBChar::valid(x.substr(0, 2)));
  EXPECT_FALSE(MBChar::valid(x.substr(0, 3)));
  EXPECT_FALSE(MBChar::valid(x.substr(1, 1)));
  EXPECT_FALSE(MBChar::valid(x.substr(1, 2)));
  EXPECT_FALSE(MBChar::valid(x.substr(1, 3)));
  EXPECT_FALSE(MBChar::valid(x.substr(2, 1)));
  EXPECT_FALSE(MBChar::valid(x.substr(2, 2)));
  EXPECT_FALSE(MBChar::valid(x.substr(3, 1)));
}

TEST(MBChar, NotValidWithFiveByte) {
  std::string x("íÄÑ");
  EXPECT_EQ(x.length(), 4);
  EXPECT_TRUE(MBChar(x).valid());
  // try to make a 'fake valid' string with 5 bytes (which is not valid)
  x[0] = 0b11'11'10'10;
  EXPECT_EQ(x.length(), 4);
  EXPECT_FALSE(MBChar::valid(x));
  x += x[3];
  EXPECT_EQ(x.length(), 5);
  EXPECT_FALSE(MBChar::valid(x));
}

TEST(MBChar, GetNext) {
  MBChar s("today„Éà„É≠„É≥„Éà„ÅÆÂ§©Ê∞óis nice„ÄÇ");
  std::string x;
  std::array expected = {"„Éà", "„É≠", "„É≥", "„Éà", "„ÅÆ", "Â§©", "Ê∞ó", "„ÄÇ"};
  for (const auto& i : expected) {
    EXPECT_TRUE(s.next(x));
    EXPECT_EQ(x, i);
  }
  EXPECT_FALSE(s.next(x));
}

TEST(MBChar, GetNextIncludingSingleByte) {
  MBChar s("aÂ§©Ê∞ób");
  std::string x;
  std::array expected = {"a", "Â§©", "Ê∞ó", "b"};
  for (const auto& i : expected) {
    EXPECT_TRUE(s.next(x, false));
    EXPECT_EQ(x, i);
  }
  EXPECT_FALSE(s.next(x, false));
}

TEST(MBChar, Reset) {
  MBChar s("aÂ§©Ê∞ób");
  std::string x;
  std::array expected = {"Â§©", "Ê∞ó"};
  for (const auto& i : expected) {
    EXPECT_TRUE(s.next(x));
    EXPECT_EQ(x, i);
  }
  EXPECT_FALSE(s.next(x));
  s.reset();
  for (const auto& i : expected) {
    EXPECT_TRUE(s.next(x));
    EXPECT_EQ(x, i);
  }
  EXPECT_FALSE(s.next(x));
}

namespace fs = std::filesystem;

class MBCharCountTest : public ::testing::Test {
protected:
  void SetUp() override {
    if (fs::exists(_testDir)) TearDown();
    EXPECT_TRUE(fs::create_directories(_testSubDir));
    std::array files = {std::make_pair(_testFile1, "ÂåóÊµ∑ÈÅì"), std::make_pair(_testFile2, "ÂçóÂåó"),
                        std::make_pair(_testSubFile1, "Êù±Ë•øÁ∑ö"), std::make_pair(_testSubFile2, "Êù±Âåó")};
    for (auto& i : files) {
      std::ofstream of(i.first);
      of << i.second;
      of.close();
    }
  }
  void TearDown() override { fs::remove_all(_testDir); }
  MBCharCount c;
  fs::path _testDir = "testDir";
  fs::path _testFile1 = _testDir / "testFileÁî≤";
  fs::path _testFile2 = _testDir / "testFile‰πô";
  fs::path _testSubDir = _testDir / "test‰∏ã";
  fs::path _testSubFile1 = _testSubDir / "testSubFile1";
  fs::path _testSubFile2 = _testSubDir / "testSubFile2.txt";
};

TEST_F(MBCharCountTest, Add) {
  EXPECT_EQ(c.add("helloÁ©∫„ÅØÈùí„ÅÑ"), 4);
  EXPECT_EQ(c.add("ÁÆ±„ÅØÁ©∫„Åß„Åô"), 5);
  EXPECT_EQ(c.add("‰ªäÊó•„ÅØÊ∂º„Åó„ÅÑ„ÄÇgood bye"), 7);
  // map only includes MB chars
  EXPECT_EQ(c.uniqueEntries(), 12);
  EXPECT_EQ(c.count("Á©∫"), 2);
  EXPECT_EQ(c.count("„ÅØ"), 3);
  EXPECT_EQ(c.count("Èùí"), 1);
  EXPECT_EQ(c.count("„ÅÑ"), 2);
  EXPECT_EQ(c.count("ÁÆ±"), 1);
  EXPECT_EQ(c.count("„Åß"), 1);
  EXPECT_EQ(c.count("„Åô"), 1);
  EXPECT_EQ(c.count("‰ªä"), 1);
  EXPECT_EQ(c.count("Êó•"), 1);
  EXPECT_EQ(c.count("Ê∂º"), 1);
  EXPECT_EQ(c.count("„Åó"), 1);
  EXPECT_EQ(c.count("„ÄÇ"), 1);
}

TEST_F(MBCharCountTest, AddWithPredicate) {
  auto pred = [](const auto& s){ return s != "„ÄÇ" && s != "„ÅØ"; };
  MBCharCountIf cPred(pred);
  EXPECT_EQ(cPred.add("„Åì„Çå„ÅØÊ®°Êì¨„ÉÜ„Çπ„Éà„Åß„Åô„ÄÇ"), 9);
  EXPECT_EQ(cPred.count("„Åì"), 1);
  EXPECT_EQ(cPred.count("„Çå"), 1);
  EXPECT_EQ(cPred.count("Ê®°"), 1);
  EXPECT_EQ(cPred.count("Êì¨"), 1);
  EXPECT_EQ(cPred.count("„ÉÜ"), 1);
  EXPECT_EQ(cPred.count("„Çπ"), 1);
  EXPECT_EQ(cPred.count("„Éà"), 1);
  EXPECT_EQ(cPred.count("„Åß"), 1);
  EXPECT_EQ(cPred.count("„Åô"), 1);
  EXPECT_EQ(cPred.count("„ÅØ"), 0);
  EXPECT_EQ(cPred.count("„ÄÇ"), 0);
}

TEST_F(MBCharCountTest, AddFile) {
  EXPECT_EQ(c.addFile(_testFile1, false, false, false), 3);
  EXPECT_EQ(c.uniqueEntries(), 3);
  EXPECT_EQ(c.files(), 1);
  EXPECT_EQ(c.directories(), 0);
  EXPECT_EQ(c.count("Âåó"), 1);
  EXPECT_EQ(c.count("Êµ∑"), 1);
  EXPECT_EQ(c.count("ÈÅì"), 1);
}

TEST_F(MBCharCountTest, AddFileIncludingFile) {
  EXPECT_EQ(c.addFile(_testFile1, false, true, false), 4);
  EXPECT_EQ(c.uniqueEntries(), 4);
  EXPECT_EQ(c.count("Âåó"), 1);
  EXPECT_EQ(c.count("Êµ∑"), 1);
  EXPECT_EQ(c.count("ÈÅì"), 1);
  EXPECT_EQ(c.count("Áî≤"), 1);
}

TEST_F(MBCharCountTest, AddMissingFile) {
  try {
    c.addFile(_testDir / "missing");
    FAIL() << "Expected std::domain_error";
  } catch (std::domain_error& err) {
    EXPECT_EQ(err.what(), std::string("file not found: testDir/missing"));
    EXPECT_EQ(c.files(), 0);
    EXPECT_EQ(c.directories(), 0);
  } catch (...) {
    FAIL() << "Expected std::domain_error";
  }
}

TEST_F(MBCharCountTest, AddDirectoryNoRecurse) {
  EXPECT_EQ(c.addFile(_testDir, false, false, false), 5);
  EXPECT_EQ(c.uniqueEntries(), 4);
  EXPECT_EQ(c.files(), 2);
  EXPECT_EQ(c.directories(), 1);
  EXPECT_EQ(c.count("Âåó"), 2);
  EXPECT_EQ(c.count("Âçó"), 1);
  EXPECT_EQ(c.count("Êµ∑"), 1);
  EXPECT_EQ(c.count("ÈÅì"), 1);
}

TEST_F(MBCharCountTest, AddDirectoryNoRecurseIncludingFileNames) {
  EXPECT_EQ(c.addFile(_testDir, false, true, false), 7);
  EXPECT_EQ(c.uniqueEntries(), 6);
  EXPECT_EQ(c.count("Âåó"), 2);
  EXPECT_EQ(c.count("Âçó"), 1);
  EXPECT_EQ(c.count("Êµ∑"), 1);
  EXPECT_EQ(c.count("ÈÅì"), 1);
  EXPECT_EQ(c.count("Áî≤"), 1);
  EXPECT_EQ(c.count("‰πô"), 1);
}

TEST_F(MBCharCountTest, AddDirectoryRecurse) {
  EXPECT_EQ(c.addFile(_testDir, false, false), 10);
  EXPECT_EQ(c.uniqueEntries(), 7);
  EXPECT_EQ(c.files(), 4);
  EXPECT_EQ(c.directories(), 2);
  EXPECT_EQ(c.count("Âåó"), 3);
  EXPECT_EQ(c.count("Êù±"), 2);
  EXPECT_EQ(c.count("Âçó"), 1);
  EXPECT_EQ(c.count("Êµ∑"), 1);
  EXPECT_EQ(c.count("Ë•ø"), 1);
  EXPECT_EQ(c.count("ÈÅì"), 1);
  EXPECT_EQ(c.count("Á∑ö"), 1);
}

TEST_F(MBCharCountTest, AddDirectoryRecurseIncludingFileNamesButNoTags) {
  EXPECT_EQ(c.addFile(_testDir, false), 13);
  EXPECT_EQ(c.uniqueEntries(), 10);
  EXPECT_EQ(c.count("Âåó"), 3);
  EXPECT_EQ(c.tags("Âåó"), nullptr);
  EXPECT_EQ(c.count("Êù±"), 2);
  EXPECT_EQ(c.count("Âçó"), 1);
  EXPECT_EQ(c.count("Êµ∑"), 1);
  EXPECT_EQ(c.count("Ë•ø"), 1);
  EXPECT_EQ(c.count("ÈÅì"), 1);
  EXPECT_EQ(c.count("Á∑ö"), 1);
  EXPECT_EQ(c.count("Áî≤"), 1);
  EXPECT_EQ(c.count("‰πô"), 1);
  EXPECT_EQ(c.count("‰∏ã"), 1);
}

TEST_F(MBCharCountTest, CheckTags) {
  EXPECT_EQ(c.addFile(_testDir), 13);
  EXPECT_EQ(c.uniqueEntries(), 10);
  auto tags = c.tags("Âåó");
  ASSERT_TRUE(tags != nullptr);
  ASSERT_EQ(tags->size(), 3);
  auto i = tags->find("testFileÁî≤");
  ASSERT_NE(i, tags->end());
  EXPECT_EQ(i->second, 1);
  i = tags->find("testFile‰πô");
  ASSERT_NE(i, tags->end());
  EXPECT_EQ(i->second, 1);
  i = tags->find("testSubFile2.txt");
  ASSERT_NE(i, tags->end());
  EXPECT_EQ(i->second, 1);
}

TEST_F(MBCharCountTest, Regex) {
  std::wregex regex(L"Ôºà[^Ôºâ]+Ôºâ");
  MBCharCount r(regex);
  EXPECT_EQ(r.add("a‰ª∞Ôºà„ÅÇ„ÅäÔºâ„Åêbc‰ª∞Ôºà„ÅÇ„ÅäÔºâ„ÅêÔºâ"), 5);
  EXPECT_EQ(r.count("‰ª∞"), 2);
  EXPECT_EQ(r.count("„Åê"), 2);
  EXPECT_EQ(r.count("Ôºâ"), 1);
  EXPECT_EQ(r.count("„ÅÇ"), 0);
  EXPECT_EQ(r.count("„Åä"), 0);
  EXPECT_EQ(r.count("Ôºà"), 0);
}

} // namespace kanji
