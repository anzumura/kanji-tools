#include <gtest/gtest.h>

#include <kanji/MBChar.h>

#include <array>

namespace kanji {

TEST(MBChar, Length) {
  EXPECT_EQ(MBChar("").length(), 0);
  EXPECT_EQ(MBChar("abc").length(), 0);
  EXPECT_EQ(MBChar("abc").length(false), 3);
  EXPECT_EQ(MBChar("Â§ßblueÁ©∫").length(), 2);
  EXPECT_EQ(MBChar("Â§ßblueÁ©∫").length(false), 6);
}

TEST(MBChar, ValidOne) {
  EXPECT_FALSE(MBChar("").validOne());
  EXPECT_FALSE(MBChar("a").validOne());
  std::string x("Èõ™");
  EXPECT_EQ(x.length(), 3);
  EXPECT_TRUE(MBChar(x).validOne());
  EXPECT_FALSE(MBChar("ÂêπÈõ™").validOne());
  EXPECT_FALSE(MBChar("aÁå´").validOne());
  EXPECT_FALSE(MBChar("Áå´s").validOne());
}

TEST(MBChar, ValidOneWithTwoByte) {
  std::string x("¬©");
  EXPECT_EQ(x.length(), 2);
  EXPECT_TRUE(MBChar(x).validOne());
}

TEST(MBChar, ValidOneWithFourByte) {
  std::string x("íÄÑ"); // a four byte sumerian cuneiform symbol
  EXPECT_EQ(x.length(), 4);
  EXPECT_TRUE(MBChar(x).validOne());
}

TEST(MBChar, GetNext) {
  MBChar s("today„Éà„É≠„É≥„Éà„ÅÆÂ§©Ê∞óis nice„ÄÇ");
  std::string x;
  std::array expected = {"„Éà", "„É≠", "„É≥", "„Éà", "„ÅÆ", "Â§©", "Ê∞ó", "„ÄÇ"};
  for (const auto& i : expected) {
    EXPECT_TRUE(s.getNext(x));
    EXPECT_EQ(x, i);
  }
  EXPECT_FALSE(s.getNext(x));
}

TEST(MBChar, GetNextIncludingSingleByte) {
  MBChar s("aÂ§©Ê∞ób");
  std::string x;
  std::array expected = {"a", "Â§©", "Ê∞ó", "b"};
  for (const auto& i : expected) {
    EXPECT_TRUE(s.getNext(x, false));
    EXPECT_EQ(x, i);
  }
  EXPECT_FALSE(s.getNext(x, false));
}

TEST(MBChar, Reset) {
  MBChar s("aÂ§©Ê∞ób");
  std::string x;
  std::array expected = {"Â§©", "Ê∞ó"};
  for (const auto& i : expected) {
    EXPECT_TRUE(s.getNext(x));
    EXPECT_EQ(x, i);
  }
  EXPECT_FALSE(s.getNext(x));
  s.reset();
  for (const auto& i : expected) {
    EXPECT_TRUE(s.getNext(x));
    EXPECT_EQ(x, i);
  }
  EXPECT_FALSE(s.getNext(x));
}

} // namespace kanji
